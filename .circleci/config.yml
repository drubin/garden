# Javascript Node CircleCI 2.1 configuration file
version: 2.1

# Shared config to use between jobs
# These can be used to inject shared variables
# see https://blog.daemonl.com/2016/02/yaml.html
.references:
  go-config: &go-config
    docker:
    - image: circleci/golang:1.10
    working_directory: /go/src/github.com/garden-io/garden

  node-config: &node-config
    docker:
      - image: circleci/node:10

# Reuseable commands to execute in jobs
# see https://circleci.com/docs/2.0/configuration-reference/#commands-requires-version21
# and example https://github.com/mapbox/mapbox-gl-native/blob/master/circle.yml
commands:
  go_install_deps:
    description: "Installs and caches dependencies with dep"
    steps:
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "Gopkg.lock" }}
      - run: go get -u github.com/jstemmer/go-junit-report
      - run:
          name: Install dep
          command: |
            if [ ! -d /go/src/github.com/garden-io/garden/vendor ]; then
                curl -L -s https://github.com/golang/dep/releases/download/v0.4.1/dep-linux-amd64 -o /go/bin/dep
                chmod +x /go/bin/dep
                /go/bin/dep ensure
            fi
      - save_cache:
          key: pkg-cache-{{ checksum "Gopkg.lock" }}
          paths:
            - "/go/src/github.com/garden-io/garden/vendor"
  docker_build:
    description: Builds and Tags a Docker Image.
    parameters:
      context:
        description: Directory to build in
        type: string
        default: .
      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile in working directory.
        type: string
        default: Dockerfile
      image:
        description: Name of image to create. Defaults to a combination of $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME
      tag:
        description: Value for tag to use. Defaults to $CIRCLE_SHA1.
        type: string
        default: $CIRCLE_SHA1
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: docker.io
    steps:
      - run:
          name: Build Docker Image
          command: docker build -f << parameters.dockerfile >> -t << parameters.registry >>/<< parameters.image >>:<< parameters.tag >> << parameters.context >>
jobs:
  test-go:
    <<: *go-config
    steps:
      - checkout
      - go_install_deps
      - run:
          name: Unit Tests
          command: |
            cd garden-cli
            go test -v 2>&1 | go-junit-report > /tmp/report.xml
      - store_artifacts:
          path: /tmp/report.xml
      - store_test_results:
          path: /tmp/
  build-go:
    <<: *go-config
    steps:
      - checkout
      - go_install_deps
      - run: go get -u github.com/goreleaser/goreleaser
      - run: cd garden-cli && goreleaser --snapshot --rm-dist
      - store_artifacts:
          path: garden-cli/dist/
          destination: /downloads
  build-sync:
    <<: *node-config
    steps:
      - checkout
      - docker_build
          context: garden-sync
  test-node:
    <<: *node-config
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install rsync
      - setup_remote_docker:
          docker_layer_caching: true
      # Download and cache dependencies
      - restore_cache:
          keys:
          - root-{{ checksum "package-lock.json" }}
      - restore_cache:
          keys:
          - garden-service-{{ checksum "garden-service/package-lock.json" }}

      - run: git submodule update --init --recursive

      # only install if node_modules wasn't cached
      - run: if [ ! -d "node_modules" ]; then npm ci; fi
      - save_cache:
          paths: [node_modules]
          key: root-{{ checksum "package-lock.json" }}

      - run: cd garden-service && npm install
      - save_cache:
          paths: [garden-service/node_modules]
          key: garden-service-{{ checksum "garden-service/package-lock.json" }}

      - run:
          name: build
          command: npm run ci-build

      - run:
          name: Make sure generated docs are up-to-date
          command: npm run check-docs

      - run:
          name: lint
          command: npm run lint

      - run:
          name: test
          command: npm run ci-test

workflows:
 version: 2
 all-tests:
   jobs:
     - test-go
     - test-node
     # Fast enough to run on every branch
     - build-go

